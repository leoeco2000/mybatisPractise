<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE configuration  
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<properties resource="db.properties" />
	<settings>
		<!-- 该配置影响的所有映射器中配置的缓存的全局开关。默认值true -->
		<setting name="cacheEnabled" value="true" />
		<!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值false -->
		<setting name="lazyLoadingEnabled" value="false" />
		<!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true -->
		<!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 -->
		<setting name="aggressiveLazyLoading" value="true"/>
		<!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值true -->
		<setting name="useColumnLabel" value="true" />
		<!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 
			Derby）。 默认值false -->
		<setting name="useGeneratedKeys" value="false" />
		<!-- 指定 MyBatis 应如何自动映射列到字段或属性。
			NONE 表示取消自动映射；
			PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 
			FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 -->
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。  -->
		<!-- NONE: 不做任何反应 -->
		<!-- WARNING: 输出提醒日志 -->
		<!-- ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为WARN) -->
		<!-- FAILING: 映射失败 (抛出 SqlSessionException) -->
		<!-- <setting name="autoMappingUnknownColumnBehavior"
			value="WARNING" /> -->
		<!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 
			执行器将重用语句并执行批量更新。默认SIMPLE -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		<!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
		<setting name="defaultStatementTimeout" value="25" />
		<!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。 -->
		<setting name="defaultFetchSize" value="100" />
		<!-- 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。默认值False -->
		<setting name="safeRowBoundsEnabled" value="false" />
		<!-- 允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。默认值False -->
		<setting name="safeResultHandlerEnabled" value="false" />
		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 
			的类似映射。 默认false -->
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 
			默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 
			的不同调用将不会共享数据。 -->
		<setting name="localCacheScope" value="SESSION" />
		<!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 
			NULL、VARCHAR 或 OTHER。 -->
		<setting name="jdbcTypeForNull" value="OTHER" />
		<!-- 指定哪个对象的方法触发一次延迟加载。 -->
		<setting name="lazyLoadTriggerMethods"
			value="equals,clone,hashCode,toString" />
	</settings>

	<!-- 1、typeAliases：设置pojo别名 -->
	<typeAliases>
		<!-- 方式1:针对单个别名的定义。type：类型的路径； alias：别名 -->
		<!-- <typeAlias alias="user" type="com.mybatis.common.user.entity.User"/> -->
		<!-- 方式2:自动扫描，将JAVA类的类名作为类的类别名 -->
		<package name="com.mybatis.common.user.entity" />
	</typeAliases>

	<!-- 注册自定义类型处理器 -->
	<typeHandlers>
		<!-- TODO -->
		<typeHandler handler="com.mybatis.util.AddressTypeHandler" />
		<typeHandler
			handler="com.mybatis.util.CityEnumTypeHandler" />
	</typeHandlers>

	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC">
				<!-- TODO -->
				<property name="closeConnection" value="false" />
			</transactionManager>

			<!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI -->
			<!-- POOLED 表示支持JDBC数据源连接池 -->
			<!-- UNPOOLED 表示不支持数据源连接池 -->
			<!-- JNDI 表示支持外部数据源连接池 -->

			<!-- TODO JNDI怎么用 -->
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		<environment id="product">
			<transactionManager type="JDBC" />
			<dataSource type="JNDI">
				<!-- mybatis-config.xml中有两种方式可以进行JNDI数据源的配置 -->
				<!-- 1. 第一种方式需要配置initial_context和data_source的值，本例中 -->
				<!-- initial_context="java:/comp/env" -->
				<!-- data_source="jdbc/mybatis-jndi" -->
				<!-- 2. 第二种方式只需要配置data_source的值 -->
				<!-- data_source="java:/comp/env/jdbc/mybatis-jndi" -->
				<!-- 结论：其实是一样的，请结合context.xml配置文件内容查看此处 -->
				<property name="data_source" value="jdbc/mybatis-jndi" />
				<property name="initial_context" value="java:/comp/env" />
			</dataSource>
		</environment>
	</environments>

	<mappers>
		<!-- 第一种方式： 一个个指定接口文件及配置文件位置 <mapper resource="com/mybatis/common/user/mapper/UserMapper.xml"/> 
			<mapper class="com.mybatis.common.user.mapper.UserMapper"/> -->
		<!-- 第二种方式： 指定目录加载，要求接口文件与xml配置在同一个目录下 -->
		<!-- <mapper class="com.mybatis.common.user.mapper"/> -->

		<!-- 导入包下所有接口和配置文件 -->
		<package name="com.mybatis.common.user.mapper" />
	</mappers>

</configuration>